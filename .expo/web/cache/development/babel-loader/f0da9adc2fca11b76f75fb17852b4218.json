{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport getNews from \"../api/GetNews\";\nimport HomeTitle from \"../components/HomeTitle\";\nimport NewsCard from \"../components/NewsCard\";\nimport color from \"../utils/color\";\nimport refreshNews from \"../api/RefreshNews\";\nimport { setRefresh } from \"../stores/refreshStore\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nHomeScreen = function HomeScreen(props) {\n  var news = useSelector(function (state) {\n    return state.news.value;\n  });\n  var refreshed = useSelector(function (state) {\n    return state.refresh.refreshed;\n  });\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (news == null) {\n      getNews();\n    }\n  }, [refreshed]);\n\n  var handleReload = function handleReload() {\n    dispatch(setRefresh(true));\n    refreshNews();\n  };\n\n  if (news == null) {\n    return _jsx(ScrollView, {\n      style: styles.container,\n      children: _jsx(HomeTitle, {})\n    });\n  } else {\n    return _jsxs(ScrollView, {\n      style: styles.container,\n      onclick: handleReload,\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: refreshed,\n        onRefresh: handleReload\n      }),\n      children: [_jsx(HomeTitle, {}), news.map(function (data, i) {\n        return _jsx(NewsCard, {\n          newsData: data\n        }, i);\n      })]\n    });\n  }\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height: '100%',\n    width: '100%',\n    backgroundColor: color.background,\n    paddingLeft: 15,\n    paddingRight: 15,\n    paddingBottom: 40\n  }\n});\nexport default HomeScreen;","map":{"version":3,"sources":["D:/React Native/NewsFeed/src/screens/Home.js"],"names":["React","useEffect","useState","useDispatch","useSelector","getNews","HomeTitle","NewsCard","color","refreshNews","setRefresh","HomeScreen","props","news","state","value","refreshed","refresh","dispatch","handleReload","styles","container","map","data","i","StyleSheet","create","flex","height","width","backgroundColor","background","paddingLeft","paddingRight","paddingBottom"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,OAAP;AACA,OAAOC,SAAP;AACA,OAAOC,QAAP;AACA,OAAOC,KAAP;AACA,OAAOC,WAAP;AACA,SAAQC,UAAR;;;;AAEAC,UAAU,GAAG,oBAACC,KAAD,EAAW;AAGpB,MAAMC,IAAI,GAAGT,WAAW,CAAC,UAACU,KAAD;AAAA,WAAWA,KAAK,CAACD,IAAN,CAAWE,KAAtB;AAAA,GAAD,CAAxB;AACA,MAAMC,SAAS,GAAGZ,WAAW,CAAC,UAAAU,KAAK;AAAA,WAAIA,KAAK,CAACG,OAAN,CAAcD,SAAlB;AAAA,GAAN,CAA7B;AACA,MAAME,QAAQ,GAAGf,WAAW,EAA5B;AAIAF,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGY,IAAI,IAAI,IAAX,EAAgB;AACZR,MAAAA,OAAO;AACV;AACJ,GAJQ,EAIN,CAACW,SAAD,CAJM,CAAT;;AAMA,MAAMG,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvBD,IAAAA,QAAQ,CAACR,UAAU,CAAC,IAAD,CAAX,CAAR;AACAD,IAAAA,WAAW;AACd,GAHD;;AAKA,MAAGI,IAAI,IAAI,IAAX,EAAiB;AACb,WACI,KAAC,UAAD;AAAY,MAAA,KAAK,EAAEO,MAAM,CAACC,SAA1B;AAAA,gBACI,KAAC,SAAD;AADJ,MADJ;AAKH,GAND,MAMO;AACH,WACI,MAAC,UAAD;AAAY,MAAA,KAAK,EAAED,MAAM,CAACC,SAA1B;AAAqC,MAAA,OAAO,EAAEF,YAA9C;AACI,MAAA,cAAc,EAAE,KAAC,cAAD;AAAgB,QAAA,UAAU,EAAEH,SAA5B;AAAuC,QAAA,SAAS,EAAEG;AAAlD,QADpB;AAAA,iBAEI,KAAC,SAAD,KAFJ,EAIQN,IAAI,CAACS,GAAL,CAAS,UAACC,IAAD,EAAOC,CAAP,EAAa;AAClB,eAAO,KAAC,QAAD;AAAU,UAAA,QAAQ,EAAED;AAApB,WAA+BC,CAA/B,CAAP;AACH,OAFD,CAJR;AAAA,MADJ;AAWH;AAGJ,CAzCD;;AA2CA,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC7BL,EAAAA,SAAS,EAAE;AACPM,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,MAAM,EAAE,MAFD;AAGPC,IAAAA,KAAK,EAAE,MAHA;AAIPC,IAAAA,eAAe,EAAEtB,KAAK,CAACuB,UAJhB;AAKPC,IAAAA,WAAW,EAAE,EALN;AAMPC,IAAAA,YAAY,EAAE,EANP;AAOPC,IAAAA,aAAa,EAAE;AAPR;AADkB,CAAlB,CAAf;AAYA,eAAevB,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { RefreshControl, ScrollView, StyleSheet } from 'react-native';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport getNews from '../api/GetNews';\r\nimport HomeTitle from '../components/HomeTitle';\r\nimport NewsCard from '../components/NewsCard';\r\nimport color from '../utils/color';\r\nimport refreshNews from '../api/RefreshNews';\r\nimport {setRefresh} from '../stores/refreshStore';\r\n\r\nHomeScreen = (props) => {\r\n\r\n    // const [news, setNews] = useState(null);\r\n    const news = useSelector((state) => state.news.value);\r\n    const refreshed = useSelector(state => state.refresh.refreshed);\r\n    const dispatch = useDispatch();\r\n    // const [reloaded, setReloaded] = useState(false);\r\n    \r\n\r\n    useEffect(() => {\r\n        if(news == null){\r\n            getNews();\r\n        }\r\n    }, [refreshed])\r\n\r\n    const handleReload = () => {\r\n        dispatch(setRefresh(true));\r\n        refreshNews();\r\n    }\r\n\r\n    if(news == null) {\r\n        return (\r\n            <ScrollView style={styles.container}>\r\n                <HomeTitle />\r\n            </ScrollView>\r\n        );\r\n    } else {\r\n        return (\r\n            <ScrollView style={styles.container} onclick={handleReload}\r\n                refreshControl={<RefreshControl refreshing={refreshed} onRefresh={handleReload}/>}>\r\n                <HomeTitle />\r\n                {\r\n                    news.map((data, i) => {\r\n                        return <NewsCard newsData={data} key={i} />\r\n                    })\r\n                }\r\n            </ScrollView>\r\n        );\r\n    }\r\n   \r\n    \r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        height: '100%',\r\n        width: '100%',\r\n        backgroundColor: color.background,\r\n        paddingLeft: 15,\r\n        paddingRight: 15,\r\n        paddingBottom: 40\r\n    }\r\n})\r\n\r\nexport default HomeScreen;"]},"metadata":{},"sourceType":"module"}